cmake_minimum_required(VERSION 3.10)
if(CMAKE_SYSTEM MATCHES Windows)
  set(CMAKE_CXX_COMPILER "C:/ProgramData/mingw64/mingw64/bin/c++.exe")
  set(CMAKE_C_COMPILER "C:/ProgramData/mingw64/mingw64/bin/gcc.exe")
  project(Inventory-System-CPP VERSION 1.0 LANGUAGES CXX)
  add_executable(Inventory-System-CPP src/main.cpp)
  target_include_directories(Inventory-System-CPP PUBLIC ${CMAKE_SOURCE_DIR}/include )
  target_link_directories(Inventory-System-CPP PUBLIC ${CMAKE_SOURCE_DIR}/lib64)
  target_link_libraries(Inventory-System-CPP PUBLIC sqlite3)
endif()
if(CMAKE_SYSTEM MATCHES Linux)
  project(Inventory-System-CPP VERSION 1.0 LANGUAGES CXX)
  add_executable(Inventory-System-CPP src/main.cpp)
  target_include_directories(Inventory-System-CPP PUBLIC ${CMAKE_SOURCE_DIR}/include )
  find_package(SQLite3 REQUIRED)
  target_link_libraries(Inventory-System-CPP SQLite::SQLite3)
  target_link_libraries(Inventory-System-CPP wt)
endif()
message(STATUS "Build host runs Linux")
project(Inventory-System-CPP VERSION 1.0 LANGUAGES CXX)
add_executable(Inventory-System-CPP tests/cssAPI.cpp)
target_include_directories(Inventory-System-CPP PUBLIC ${CMAKE_SOURCE_DIR}/include )
find_package(SQLite3 REQUIRED)
target_link_libraries(Inventory-System-CPP SQLite::SQLite3)
target_link_libraries(Inventory-System-CPP wt)
target_link_libraries(Inventory-System-CPP wthttp)

INCLUDE_DIRECTORIES(/usr/local/include/Wt)

#target_link_directories(Inventory-System-CPP PUBLIC ${CMAKE_SOURCE_DIR}/lib64)
#target_link_libraries(Inventory-System-CPP PUBLIC sqlite3)

#cmake -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER="C:/ProgramData/mingw64/mingw64/bin/c++.exe" -DCMAKE_C_COMPILER="C:/ProgramData/mingw64/mingw64/bin/gcc.exe" ..
#Or 
#cmake -G "MingW Makefiles" ..
